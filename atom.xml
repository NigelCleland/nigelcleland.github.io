<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Electric Python]]></title>
  <link href="http://NigelCleland.github.io/atom.xml" rel="self"/>
  <link href="http://NigelCleland.github.io/"/>
  <updated>2013-05-12T13:54:58+12:00</updated>
  <id>http://NigelCleland.github.io/</id>
  <author>
    <name><![CDATA[Nigel Cleland]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Selecting Data with Pandas]]></title>
    <link href="http://NigelCleland.github.io/blog/2013/05/12/selecting-data-with-pandas/"/>
    <updated>2013-05-12T13:12:00+12:00</updated>
    <id>http://NigelCleland.github.io/blog/2013/05/12/selecting-data-with-pandas</id>
    <content type="html"><![CDATA[<p>As part of my job I need to do a large amount of sample analysis, and visualisation of small subsets of data. This requires a large quantity of iteration, trial and error and repetitive coding. Something we all wish we could avoid, yet sometimes can&rsquo;t. To give a practical example, I often need to work with half hourly data, for a wide range of individual metrics which may have similarities. What I need to do, is isolate this data in various ways.</p>

<!-- more -->


<p>Now, here we introduce pandas. Pandas is an analysis library for Python built on top of numpy for fast merges, joins and analysis. It is an essential part of my day to day work and if you have to work with any decent amount of data I highly recommend using it. However, there is one slight issue I&rsquo;ve had with it. Selecting small subsets of data in a simple fashion. To give an example, in python, to iterate we can use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">subset</span><span class="p">:</span>
</span><span class='line'>          <span class="k">print</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the key is that we&rsquo;re looking at the entire container, and then assessing whether our item fits that subset. However, in pandas it isn&rsquo;t so easy.
In Pandas, to select a subset of the data we create an array of booleans and then apply this to the dataframe as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>
</span><span class='line'><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="s">&quot;B&quot;</span><span class="p">,</span> <span class="s">&quot;C&quot;</span><span class="p">,</span> <span class="s">&quot;D&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">subset</span> <span class="o">=</span> <span class="n">df</span><span class="p">[(</span><span class="n">df</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">&quot;B&quot;</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mf">0.2</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, we are selecting a subset of our data which satisfies the condition of column A being less than or equal to 0.5 and column B greater than or equal to 0.2. (Note, the brackets around each statement are required.</p>

<p>However, this syntax, while clear for simple examples does start to break down at higher orders. For example, let&rsquo;s say we had qualitative values in our data frame and we want to select a small subset of them. We cannot use the in operator, or a multiple equal operator. Instead, we need to use the or operator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Note this won&#39;t work:</span>
</span><span class='line'><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="p">(</span><span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.7</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Require the following:</span>
</span><span class='line'><span class="n">df</span><span class="p">[(</span><span class="n">df</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="mf">0.3</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="mf">0.2</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="mf">0.7</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the amount of duplicate code requires continues to increase linearly with each additional item we wish to check. Is there a better way?
Turns out, maybe.</p>

<p>What I have done is develop a range of common masks and place them in a single <a href="https://github.com/NigelCleland/masks">repository</a> or it may be downloaded using pip</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">pip</span> <span class="n">install</span> <span class="n">masks</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use it, you simply import the masks module after importing pandas and it will apply a number of additional methods to the Series and DataFrame classes in the pandas module. I&rsquo;ve attempted to avoid all known api clashes through the addition of _masks at the end of each function, which should also make the meaning clearer. Using this module our multiple selection example becomes much simpler</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">masks</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>
</span><span class='line'><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="s">&quot;B&quot;</span><span class="p">,</span> <span class="s">&quot;C&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Use the in_eqmask this mask will return all values which meet the conditions</span>
</span><span class='line'><span class="c"># the eqmask instead of just mask is to specify that equality conditions are</span>
</span><span class='line'><span class="c"># being introduced</span>
</span><span class='line'>
</span><span class='line'><span class="n">df</span><span class="o">.</span><span class="n">in_eqmask</span><span class="p">(</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">24</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Or another simple use case which has frustrated me endlessly in pandas is</span>
</span><span class='line'><span class="c"># returning all rows which satisfy a between type condition.</span>
</span><span class='line'>
</span><span class='line'><span class="n">df</span><span class="p">[(</span><span class="n">df</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mf">0.7</span><span class="p">)]</span>
</span><span class='line'><span class="n">df</span><span class="o">.</span><span class="n">bet_mask</span><span class="p">(</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.7</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is much much simpler no?</p>

<p>An additional benefit of this is that we are able to chain methods together in order to create the desired subsets. For example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">df</span><span class="o">.</span><span class="n">ge_mask</span><span class="p">(</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">le_mask</span><span class="p">(</span><span class="s">&quot;C&quot;</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span><span class="o">.</span><span class="n">ne_mask</span><span class="p">(</span><span class="s">&quot;B&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We just applied three different refinements to get all rows of the dataframe where A is greater than 5, C less than 15 and B not equal to 10.</p>

<p>There are a few more complex functions in the module, such as selecting the top, bottom or middle x% of a particular column or columns e.g.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Take the rows which satisfy the top 25% of column A, then take the bottom 10% of column B</span>
</span><span class='line'><span class="c"># from this subset.</span>
</span><span class='line'><span class="n">df</span><span class="o">.</span><span class="n">top_mask</span><span class="p">(</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span><span class="o">.</span><span class="n">bot_mask</span><span class="p">(</span><span class="s">&quot;B&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>masks is still a work in progress, however it is usable as is for prototyping and data exploration. There are a number of additional features which are still needed at this stage. There repo is <a href="https://github.com/NigelCleland/masks">here</a> and all contributions/comments are welcome. I&rsquo;m not sure this is the best way to add this functionality, however it has been useful for me in the past and thus I&rsquo;m putting it out there incase anyone else finds it useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction and blog content]]></title>
    <link href="http://NigelCleland.github.io/blog/2013/05/09/introduction-and-blog-content/"/>
    <updated>2013-05-09T12:43:00+12:00</updated>
    <id>http://NigelCleland.github.io/blog/2013/05/09/introduction-and-blog-content</id>
    <content type="html"><![CDATA[<p>So, first a brief introduction.
My name is Nigel and I am currently a Ph.D student at the University of Auckland, New Zealand.
My current research is on market based systems for procuring security (reserve) in electricity markets.
In particular, I do a substantial amount of data analysis attempting to assess the consequences and frequency of constrained situations.
I&rsquo;m currently ~1.5 years into this.</p>

<!-- more -->


<p>This blog is intended to serve as predominately writing practice, as well as thoughts on technical and esoteric matters.
I try to use open source software as much as possible in my day to day work with Python, LaTeX and Ubuntu being the main elements.
I would like to contribute more to open source in the future, however I&rsquo;m not entirely sure on the best way to accomplish this.
Hopefully, some blog posts on semi technical matters may provide a stepping stone for this.
I typically use Python for data analysis, especially the incredibly useful pandas and matplotlib libraries.</p>

<p>Outside of this, I love reading, tinkering with and building assorted trinkets/toys and weight lifting.
I plan on using this blog to post on a range of subjects which I have found both interesting and useful over the years.
As such, content may vary greatly.
In particular, I&rsquo;m trying to read a large number of new books with the broadly ambitious aim to read at least one on average every week.
This ambitious tends to often be thwarted by running out of new books to read.
I typically read a lot of print books, not because I am a luddite as I have previously bought, and read, a lot of kindle books.
But mainly because of the concept of ownership and what happens to such books if Amazon or some other company were to change its terms of service.</p>

<p>I am a bit of an information junkie, which I&rsquo;m trying to control as it does tend to consume a lot of my time.
Short form information, which tends to skirt a subject and not really cover it in depth is not exactly a great source of information.
As such, I&rsquo;m attempting to read more literature, long form articles and in depth coverage of topics.
In addition, contributing to these by writing about them is something I want to initiate and this is a good first step.</p>

<p>Finally, I have no set schedule for updating this blog although I will attempt to do so as frequently as my interest permits.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Octopress with Ubuntu]]></title>
    <link href="http://NigelCleland.github.io/blog/2013/05/08/setting-up-octopress/"/>
    <updated>2013-05-08T19:41:00+12:00</updated>
    <id>http://NigelCleland.github.io/blog/2013/05/08/setting-up-octopress</id>
    <content type="html"><![CDATA[<p>Right, so this post will serve as a general overview as to a couple of the difficulties I had when setting up Octopress and Ruby.
I mainly use Python for my day to day analysis work and as such have little experience with Ruby.
I used rbenv for my installation and a couple issues arose which were a bit of a pain to sort out as googling appeared to let me down here.</p>

<!-- more -->


<p>So a couple things. If you are using Ubuntu then you need to use .profile instead of .bash_profile.
If done right the bottom two lines of the following should be.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat ~/.profile
</span><span class='line'>
</span><span class='line'>export PATH="$HOME/.rbenv/bin:$PATH
</span><span class='line'>eval "$(rbenv init -)"</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Another issue which may arise is the difference between the system, and rbenv ruby installation.
The commands you are looking for here are as follows.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rbenv versions # Will list the installed versions of rbenv
</span><span class='line'>rbenv local &lt;build&gt; # Will set a local version of ruby for the specific folder
</span><span class='line'>rbenv global &lt;build&gt; # Specify the global build of ruby to use.
</span><span class='line'>ruby --version # List the current version of ruby</span></code></pre></td></tr></table></div></figure>


<p>I recommend playing around with each of these commands until you&rsquo;re comfortable switching between different versions of ruby.
In my initial installations I was having a lot of difficulty with different versions of ruby in different locations.
Generally, just a major annoyance to say the least.</p>

<p>Once these two issues were sorted out installation was pretty simple overall.
Hopefully if anyone else is having similar difficulties this post may point them in the right direction.</p>

<p>I&rsquo;ll update this post if needed or if I remember something new.</p>
]]></content>
  </entry>
  
</feed>
